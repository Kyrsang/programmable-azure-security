name: Terraform on Comment

on:
  issue_comment:
    types: [created]

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  terraform-plan:
    if: startsWith(github.event.comment.body, '#terraform:plan')
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    env:
      tf_actions_working_dir: ./terraform
      PLAN: ""

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Fmt (Auto-correct)
        id: fmt
        run: terraform fmt -recursive
        working-directory: ${{ env.tf_actions_working_dir }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.tf_actions_working_dir }}

      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: ${{ env.tf_actions_working_dir }}

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color > plan.txt
          cat plan.txt
          echo "PLAN<<EOF" >> $GITHUB_ENV
          cat plan.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        working-directory: ${{ env.tf_actions_working_dir }}

      - name: Comment on Issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          fmt-outcome: ${{ steps.fmt.outcome }}
          init-outcome: ${{ steps.init.outcome }}
          validate-outcome: ${{ steps.validate.outcome }}
          plan-outcome: ${{ steps.plan.outcome }}
          script: |
            function icon(outcome) {
              return outcome === 'success' ? '✅' : '❌';
            }
            
            const fmt = icon(process.env.INPUT_FMT_OUTCOME);
            const init = icon(process.env.INPUT_INIT_OUTCOME);
            const validate = icon(process.env.INPUT_VALIDATE_OUTCOME);
            const plan = icon(process.env.INPUT_PLAN_OUTCOME);
            
            const output = `#### Terraform Format and Style ${fmt}
              #### Terraform Initialization ${init}
              #### Terraform Validation ${validate}
              #### Terraform Plan ${plan}
                
                \`\`\`hcl
                ${process.env.PLAN}
                \`\`\`
              
              *Pusher: @${{ github.actor }}, Workflow: \`${{ github.workflow }}\`*`;
                
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });